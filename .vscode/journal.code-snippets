{
    // Place your 08-journal-app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Retorna una respuesta exito de un thunk": {
        "prefix": "redux-thunk-exito-resp",
        "body": [
            "return {",
            "   ok: true${1:,}",
            "   ${2:keys}",
            "}"
        ],
        "description": "Retorna una respuesta exito de un thunk"
    },
    "Retorna una respuesta error de un thunk": {
        "prefix": "redux-thunk-error-resp",
        "body": [
            "return { ok: false, errorMessage: error.message }"
        ],
        "description": "Retorna una respuesta error de un thunk"
    },
    "Get auth status de la App": {
        "prefix": "redux-auth-status-app",
        "body": [
            "const { ${1:status}${2:,} ${3:errorMessage} } = useSelector( state => state.auth )"
        ],
        "description": "Get auth status de la App"
    },
    "UseDispatch snippet": {
        "prefix": "redux-useDispatch",
        "body": [
            "const dispatch = useDispatch()"
        ],
        "description": "UseDispatch snippet custom para la App"
    },
    "UseSelector snippet": {
        "prefix": "redux-useSelector",
        "body": [
            "const {${2:attributes}} = useSelector( state => state.${1:selectorName})"
        ],
        "description": "UseSelector snippet custom para la App"
    },
    "Crea un reducer para el store": {
        "prefix": "redux-reducer-store",
        "body": [
            "${1:nombreReducer}: (${2:state}, ${3:action}) => {",
            "",   
            "}"
        ],
        "description": "Crear function para key de objeto"
    },
}